`timescale 1ns/1ps

module PPA (
    input  [15:0] A, 
    input  [15:0] B,
    input         Cin,
    output [15:0] S,
    output        Cout
);


    wire [15:0] p_0, g_0;
    genvar i;
    generate
      for (i=0; i<16; i=i+1) begin : precompute
         assign p_0[i] = A[i] | B[i]; 
         assign g_0[i] = A[i] & B[i];  
      end
    endgenerate


    wire [15:0] p_1, g_1;
    wire [15:0] p_2, g_2;
    wire [15:0] p_3, g_3;
    wire [15:0] p_4, g_4;


    function [1:0] merge_p_g;
        input p_i, g_i, p_j, g_j; 
        reg p_out, g_out;
        begin
            p_out = p_i & p_j;      
            g_out = g_i | (p_i & g_j);
            merge_p_g = {g_out, p_out};
        end
    endfunction


    generate
      
      wire tmp_g0 = g_0[0] | (p_0[0] & Cin);
      assign g_1[0] = tmp_g0;
      assign p_1[0] = p_0[0];  

      for (i=1; i<16; i=i+1) begin : stage1
         if (i % 2 == 1) begin
           
            wire [1:0] mg = merge_p_g(p_0[i], g_0[i], p_0[i-1], g_0[i-1]);
            assign g_1[i] = mg[1];
            assign p_1[i] = mg[0];
         end else begin
          
            assign g_1[i] = g_0[i];
            assign p_1[i] = p_0[i];
         end
      end
    endgenerate

   
    generate
      genvar j;
      for (j=0; j<16; j=j+1) begin : stage2
         if (j<2) begin
            
            assign g_2[j] = g_1[j];
            assign p_2[j] = p_1[j];
         end
         else if ((j % 4) >= 2) begin
            wire [1:0] mg2 = merge_p_g(p_1[j], g_1[j], p_1[j-2], g_1[j-2]);
            assign g_2[j] = mg2[1];
            assign p_2[j] = mg2[0];
         end
         else begin
            // pass
            assign g_2[j] = g_1[j];
            assign p_2[j] = p_1[j];
         end
      end
    endgenerate


  
    generate
      genvar k;
      for (k=0; k<16; k=k+1) begin : stage3
         if (k<4) begin
            assign g_3[k] = g_2[k];
            assign p_3[k] = p_2[k];
         end
         else if ((k % 8) >= 4) begin
            wire [1:0] mg3 = merge_p_g(p_2[k], g_2[k], p_2[k-4], g_2[k-4]);
            assign g_3[k] = mg3[1];
            assign p_3[k] = mg3[0];
         end
         else begin
            assign g_3[k] = g_2[k];
            assign p_3[k] = p_2[k];
         end
      end
    endgenerate


    generate
      genvar m;
      for (m=0; m<16; m=m+1) begin : stage4
         if (m<8) begin
            assign g_4[m] = g_3[m];
            assign p_4[m] = p_3[m];
         end else begin
            wire [1:0] mg4 = merge_p_g(p_3[m], g_3[m], p_3[m-8], g_3[m-8]);
            assign g_4[m] = mg4[1];
            assign p_4[m] = mg4[0];
         end
      end
    endgenerate

    wire [15:0] sum;
    assign sum[0] = (A[0] ^ B[0]) ^ Cin;

    generate
      for (i=1; i<16; i=i+1) begin : final_sum
         assign sum[i] = (A[i] ^ B[i]) ^ g_4[i-1];
      end
    endgenerate

    assign S    = sum;
    assign Cout = g_4[15];

endmodule
