/**
 * This is an autogenerated netlist code from CircuitVerse. Verilog Code can be
 * tested on https://www.edaplayground.com/ using Icarus Verilog 0.9.7. This is an
 * experimental module and some manual changes make need to be done in order for
 * this to work.
 *
 * If you have any ideas/suggestions or bug fixes, raise an issue
 * on https://github.com/CircuitVerse/CircuitVerse/issues/new/choose
 */

/*
  Element Usage Report
    Input - 11 times
    AndGate - 3 times
    OrGate - 3 times
    Output - 6 times
    NotGate - 4 times
    SubCircuit - 4 times
    ConstantVal - 1 times
*/

/*
  Usage Instructions and Tips
    Labels - Ensure unique label names and avoid using verilog keywords
    Warnings - Connect all optional inputs to remove warnings
*/

// Sample Testbench Code - Uncomment to use

/*
module TestBench();

  reg A0, B0, A1, B1, B2, A2, A3, B3;

  wire S3, S2, S1, S0;

  Main DUT0(S3, S2, S1, S0, A0, B0, A1, B1, B2, A2, A3, B3);

  initial begin
    A0 = 0;
    B0 = 0;
    A1 = 0;
    B1 = 0;
    B2 = 0;
    A2 = 0;
    A3 = 0;
    B3 = 0;

    #15
    $display("S3 = %b", S3);
    $display("S2 = %b", S2);
    $display("S1 = %b", S1);
    $display("S0 = %b", S0);

    #10
    $display("S3 = %b", S3);
    $display("S2 = %b", S2);
    $display("S1 = %b", S1);
    $display("S0 = %b", S0);

    $finish;

  end
endmodule

*/

module Full_bit_adder(Sum, Cout, A, B, Cin);
  output Sum,  Cout;
  input A, B, Cin;
  wire and_1_out, or_2_out, and_0_out, or_1_out, and_2_out, or_0_out;
  assign and_1_out = Cin & B;
  assign or_2_out = and_0_out | and_1_out | and_2_out;
  assign Cout = or_2_out;
  assign and_0_out = Cin & A;
  assign or_1_out = or_0_out | Cin;
  assign Sum = or_1_out;
  assign and_2_out = B & A;
  assign or_0_out = A | B;
endmodule


module Main(S3, S2, S1, S0, A0, B0, A1, B1, B2, A2, A3, B3);
  output S3,  S2,  S1,  S0;
  input A0, B0, A1, B1, B2, A2, A3, B3;
  wire not_3_out, Full_bit_adder_3_out_0, Full_bit_adder_3_out_1, Full_bit_adder_2_out_0, Full_bit_adder_2_out_1, not_2_out, not_1_out, Full_bit_adder_1_out_0, Full_bit_adder_1_out_1, not_0_out, Full_bit_adder_0_out_0, Full_bit_adder_0_out_1, const_0;
  assign not_3_out = ~B3;
  Full_bit_adder Full_bit_adder_3(Full_bit_adder_3_out_0, Full_bit_adder_3_out_1, A3, not_3_out, Full_bit_adder_2_out_1);
  assign S3 = Full_bit_adder_3_out_0;
  Full_bit_adder Full_bit_adder_2(Full_bit_adder_2_out_0, Full_bit_adder_2_out_1, A2, not_2_out, Full_bit_adder_1_out_1);
  assign S2 = Full_bit_adder_2_out_0;
  assign not_2_out = ~B2;
  assign not_1_out = ~B1;
  Full_bit_adder Full_bit_adder_1(Full_bit_adder_1_out_0, Full_bit_adder_1_out_1, A1, not_1_out, Full_bit_adder_0_out_1);
  assign S1 = Full_bit_adder_1_out_0;
  assign not_0_out = ~B0;
  Full_bit_adder Full_bit_adder_0(Full_bit_adder_0_out_0, Full_bit_adder_0_out_1, A0, not_0_out, const_0);
  assign S0 = Full_bit_adder_0_out_0;
  assign const_0 = 1'b1;
endmodule
